// <auto-generated />
using System;
using HotChocolate.Example.Infrastructure.Configurations.Persistence.AdventureWorks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotChocolate.Example.Infrastructure.Migrations
{
    [DbContext(typeof(AdventureWorksContext))]
    [Migration("20231212224722_init-products")]
    partial class initproducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("Primary key for Product records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Product color.");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was discontinued.");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money")
                        .HasComment("Selling price.");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the product.");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID")
                        .HasComment("Product is a member of this product category. Foreign key to ProductCategory.ProductCategoryID. ");

                    b.Property<int?>("ProductModelId")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID")
                        .HasComment("Product is a member of this product model. Foreign key to ProductModel.ProductModelID.");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Unique product identification number.");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was no longer available for sale.");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was available for sale.");

                    b.Property<string>("Size")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Product size.");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money")
                        .HasComment("Standard cost of the product.");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Small image of the product.");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Small image file name.");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8, 2)")
                        .HasComment("Product weight.");

                    b.HasKey("ProductId")
                        .HasName("PK_Product_ProductID");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex(new[] { "Name" }, "AK_Product_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductNumber" }, "AK_Product_ProductNumber")
                        .IsUnique();

                    b.ToTable("Product", "SalesLT", t =>
                        {
                            t.HasComment("Products sold or used in the manfacturing of sold products.");
                        });
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID")
                        .HasComment("Primary key for ProductCategory records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category description.");

                    b.Property<int?>("ParentProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ParentProductCategoryID")
                        .HasComment("Product category identification number of immediate ancestor category. Foreign key to ProductCategory.ProductCategoryID.");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("ProductCategoryId")
                        .HasName("PK_ProductCategory_ProductCategoryID");

                    b.HasIndex("ParentProductCategoryId");

                    b.HasIndex(new[] { "Name" }, "AK_ProductCategory_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductCategory_rowguid")
                        .IsUnique();

                    b.ToTable("ProductCategory", "SalesLT", t =>
                        {
                            t.HasComment("High-level product categorization.");
                        });
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductDescriptionID")
                        .HasComment("Primary key for ProductDescription records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDescriptionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Description of the product.");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("ProductDescriptionId")
                        .HasName("PK_ProductDescription_ProductDescriptionID");

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductDescription_rowguid")
                        .IsUnique();

                    b.ToTable("ProductDescription", "SalesLT", t =>
                        {
                            t.HasComment("Product descriptions in several languages.");
                        });
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductModelId"));

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid");

                    b.HasKey("ProductModelId")
                        .HasName("PK_ProductModel_ProductModelID");

                    b.HasIndex(new[] { "Name" }, "AK_ProductModel_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductModel_rowguid")
                        .IsUnique();

                    b.ToTable("ProductModel", "SalesLT");
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.ProductModelProductDescription", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID")
                        .HasComment("Primary key. Foreign key to ProductModel.ProductModelID.");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("ProductDescriptionID")
                        .HasComment("Primary key. Foreign key to ProductDescription.ProductDescriptionID.");

                    b.Property<string>("Culture")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength()
                        .HasComment("The culture for which the description is written");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "Culture")
                        .HasName("PK_ProductModelProductDescription_ProductModelID_ProductDescriptionID_Culture");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductModelProductDescription_rowguid")
                        .IsUnique();

                    b.ToTable("ProductModelProductDescription", "SalesLT", t =>
                        {
                            t.HasComment("Cross-reference table mapping product descriptions and the language the description is written in.");
                        });
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.Product", b =>
                {
                    b.HasOne("HotChocolate.Example.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("HotChocolate.Example.Domain.Entities.ProductModel", "ProductModel")
                        .WithMany("Products")
                        .HasForeignKey("ProductModelId");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("HotChocolate.Example.Domain.Entities.ProductCategory", "ParentProductCategory")
                        .WithMany("InverseParentProductCategory")
                        .HasForeignKey("ParentProductCategoryId")
                        .HasConstraintName("FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID");

                    b.Navigation("ParentProductCategory");
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.ProductModelProductDescription", b =>
                {
                    b.HasOne("HotChocolate.Example.Domain.Entities.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescriptions")
                        .HasForeignKey("ProductDescriptionId")
                        .IsRequired();

                    b.HasOne("HotChocolate.Example.Domain.Entities.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescriptions")
                        .HasForeignKey("ProductModelId")
                        .IsRequired();

                    b.Navigation("ProductDescription");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("InverseParentProductCategory");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.ProductDescription", b =>
                {
                    b.Navigation("ProductModelProductDescriptions");
                });

            modelBuilder.Entity("HotChocolate.Example.Domain.Entities.ProductModel", b =>
                {
                    b.Navigation("ProductModelProductDescriptions");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
